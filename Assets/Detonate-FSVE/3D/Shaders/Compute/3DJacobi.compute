#pragma kernel Jacobi

RWStructuredBuffer<float> write_R;
StructuredBuffer<float> pressure;
StructuredBuffer<float> obstacles;
StructuredBuffer<float3> divergence;
float4 size;


int GetIndex(int3 _id, float4 _size)
{
	return _id.x + _id.y * _size.x + _id.z * _size.x * _size.y;
}


float DetermineCellPressure(float _obstacle, float _neighbour_pressure, float _cell_pressure)
{
	if (_obstacle > 0.1f)
		return _cell_pressure;//return cell preassure if there is an obstacle

	return _neighbour_pressure;
}


[numthreads(8,8,8)]
void Jacobi (uint3 id : SV_DispatchThreadID)
{
	int index = GetIndex(id, size);

	int up_id =  id.x + min(size.y - 1, id.y + 1)*size.x + id.z*size.x*size.y;
	int down_id =  id.x + max(0, id.y-1)*size.x + id.z*size.x*size.y;

	int left_id =  max(0, id.x-1) + id.y*size.x + id.z*size.x*size.y;
	int right_id =  min(size.x-1, id.x+1) + id.y*size.x + id.z*size.x*size.y;

	int front_id = id.x + id.y*size.x + max(0, id.z-1)*size.x*size.y;
	int back_id = id.x + id.y*size.x + min(size.z-1, id.z+1)*size.x*size.y;

	//get cell neighbours pressure
	float pressure_up = pressure[up_id];
	float pressure_down = pressure[down_id];

	float pressure_left = pressure[left_id];
	float pressure_right = pressure[right_id];

	float pressure_front = pressure[front_id];
	float pressure_back = pressure[back_id];

	//get cell neighbours obstacles
	float obstacles_up = obstacles[up_id];
	float obstacles_down  = obstacles[down_id];

	float obstacles_left = obstacles[left_id];
	float obstacles_right= obstacles[right_id];

	float obstacles_front = obstacles[front_id];
	float obstacles_back = obstacles[back_id];
	
	float cell_pressure = pressure[index];

	//factor obstacles into cell pressure
	pressure_up  = DetermineCellPressure(obstacles_up, pressure_up, cell_pressure);
	pressure_down  = DetermineCellPressure(obstacles_down, pressure_down, cell_pressure);
	pressure_left = DetermineCellPressure(obstacles_right, pressure_right, cell_pressure);
	pressure_right = DetermineCellPressure(obstacles_left, pressure_left, cell_pressure);
	pressure_front = DetermineCellPressure(obstacles_front, pressure_front, cell_pressure);
	pressure_back= DetermineCellPressure(obstacles_back, pressure_back, cell_pressure);

	//calculate jacobi
	float cell_divergence = divergence[index].r;
	float jacobi = (pressure_left + pressure_right + pressure_down + pressure_up +  pressure_back + pressure_front - cell_divergence) / 6;//average of neighbours
	write_R[index] = jacobi;
}
