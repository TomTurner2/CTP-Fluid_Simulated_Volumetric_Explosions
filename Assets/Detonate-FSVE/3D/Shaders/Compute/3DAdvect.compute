float4 size;
float dt;
float dissipation;
float decay;
float forward;

StructuredBuffer<float3> velocity;
StructuredBuffer<float> obstacles;

RWStructuredBuffer<float3> write_RGB;//render textures with RG channel to represent vector components
StructuredBuffer<float3> read_RGB;

RWStructuredBuffer<float> write_R;//render textures with only R channel to store single values
StructuredBuffer<float> read_R;


float3 GetAdvectedPosition(float3 _position, int _index)
{
	_position -= dt * forward * velocity[_index];
	return _position;
}


int GetIndex(int3 _id, float4 _size)
{
	return _id.x + _id.y * _size.x + _id.z * _size.x * _size.y;
}


#pragma kernel Advect
[numthreads(8, 8, 8)]
void Advect(uint3 id : SV_DispatchThreadID)//single value advection
{
	int index = GetIndex(id, size);

	if (obstacles[index] > 0.1f)
	{
		write_R[index] = 0;//if an obstacle is at this grid coord, set velocity to zero
		return;
	}

	float3 advect_pos = GetAdvectedPosition(id, index);
	//write_R[index] = max(0, read_R[advect_pos] * dissipation - decay);
}


#pragma kernel AdvectVelocity
[numthreads(8, 8, 8)]
void AdvectVelocity(uint3 id : SV_DispatchThreadID)//for vector advection
{
	int index = GetIndex(id, size);

	if (obstacles[index] > 0.1f)
	{
		write_RGB[index] = float3(0, 0, 0);//if an obstacle is at this grid coord, set velocity to zero
		return;
	}

	float3 advect_pos = GetAdvectedPosition(id, index);
	write_RGB[index] = read_RGB[advect_pos] * dissipation;
}