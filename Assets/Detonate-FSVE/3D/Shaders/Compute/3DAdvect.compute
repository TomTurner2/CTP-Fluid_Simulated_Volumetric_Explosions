float4 size;
float dt;
float dissipation;

StructuredBuffer<float3> velocity;
StructuredBuffer<float> obstacles;

RWStructuredBuffer<float3> write_RGB;//render textures with RG channel to represent vector components
StructuredBuffer<float3> read_RGB;

RWStructuredBuffer<float> write_R;//render textures with only R channel to store single values
StructuredBuffer<float> read_R;



int GetIndex(int3 _id, float4 _size)
{
	return _id.x + _id.y * _size.x + _id.z * _size.x * _size.y;
}


float SampleBilinear(StructuredBuffer<float> _grid, float3 _coord, float4 size)
{
	int x = _coord.x;
	int y = _coord.y;
	int z = _coord.z;
	
	float fx = _coord.x-x;
	float fy = _coord.y-y;
	float fz = _coord.z-z;
	
	//only want to validate once
	int x_plus_one = min(size.x-1, x+1);
	int y_plus_one = min(size.y-1, y+1);
	int z_plus_one = min(size.z-1, z+1);
	
	float x0 = _grid[GetIndex(_coord, size)] * (1.0f-fx) + _grid[GetIndex(int3(x_plus_one, y, z), size)] * fx;
	float x1 = _grid[GetIndex(int3(x, y, z_plus_one), size)] *
	(1.0f-fx) + _grid[GetIndex(int3(x_plus_one, y, z_plus_one), size)] * fx;	
	float x2 = _grid[GetIndex(int3(x, y_plus_one, z), size)] * (1.0f-fx) + _grid[GetIndex(int3(x_plus_one, y_plus_one, z), size)] * fx;
	float x3 = _grid[GetIndex(int3(x, y_plus_one, z_plus_one), size)] * (1.0f-fx) + _grid[GetIndex(int3(x_plus_one, y_plus_one, z_plus_one), size)] * fx;
	
	float z0 = x0 * (1.0f-fz) + x1 * fz;
	float z1 = x2 * (1.0f-fz) + x3 * fz;
	
	return z0 * (1.0f-fy) + z1 * fy;
}


float3 SampleBilinear(StructuredBuffer<float3> _grid, float3 _coord, float4 size)
{
	int x = _coord.x;
	int y = _coord.y;
	int z = _coord.z;
	
	float fx = _coord.x-x;
	float fy = _coord.y-y;
	float fz = _coord.z-z;
	
	//only need to validate once
	int x_plus_one = min(size.x-1, x+1);
	int y_plus_one = min(size.y-1, y+1);
	int z_plus_one = min(size.z-1, z+1);
	
	float3 x0 = _grid[GetIndex(_coord, size)] * (1.0f-fx) + _grid[GetIndex(int3(x_plus_one, y, z), size)] * fx;
	float3 x1 = _grid[GetIndex(int3(x, y, z_plus_one), size)] * (1.0f-fx) + _grid[GetIndex(int3(x_plus_one, y, z_plus_one), size)] * fx;	
	float3 x2 = _grid[GetIndex(int3(x, y_plus_one, z), size)] * (1.0f-fx) + _grid[GetIndex(int3(x_plus_one, y_plus_one, z), size)] * fx;
	float3 x3 = _grid[GetIndex(int3(x, y_plus_one, z_plus_one), size)] * (1.0f-fx) + _grid[GetIndex(int3(x_plus_one, y_plus_one, z_plus_one), size)] * fx;
	
	float3 z0 = x0 * (1.0f-fz) + x1 * fz;
	float3 z1 = x2 * (1.0f-fz) + x3 * fz;
	
	return z0 * (1.0f-fy) + z1 * fy;
}


float3 GetAdvectedPosition(float3 _position, int _index)
{
	_position -= dt * velocity[_index];
	return _position;
}



#pragma kernel Advect
[numthreads(8, 8, 8)]
void Advect(uint3 id : SV_DispatchThreadID)//single value advection
{
	int index = GetIndex(id, size);

	if (obstacles[index] > 0.1f)
	{
		write_R[index] = 0;//if an obstacle is at this grid coord, set velocity to zero
		return;
	}

	float3 advect_pos = GetAdvectedPosition(id, index);
	write_R[index] = max(0, SampleBilinear(read_R, advect_pos, size) * dissipation);
	//write_R[index] = max(0, read_R[GetIndex(advect_pos, size)] * dissipation);//no bilinear interpolation
}


#pragma kernel AdvectVelocity
[numthreads(8, 8, 8)]
void AdvectVelocity(uint3 id : SV_DispatchThreadID)//for vector advection
{
	int index = GetIndex(id, size);

	if (obstacles[index] > 0.1f)
	{
		write_RGB[index] = float3(0, 0, 0);//if an obstacle is at this grid coord, set velocity to zero
		return;
	}

	float3 advect_pos = GetAdvectedPosition(id, index);
	write_RGB[index] = SampleBilinear(read_RGB, advect_pos, size) * dissipation;
	//write_RGB[index] = read_RGB[GetIndex(advect_pos, size)] * dissipation;
}