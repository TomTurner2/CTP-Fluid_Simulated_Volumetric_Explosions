
RWTexture2D<float> write_R;
RWTexture2D<float> pressure;
RWTexture2D<float> obstacles;
RWTexture2D<float2> divergence;
float2 inverse_size;


float DetermineCellPressure(float _obstacle, float _neighbour_pressure, float _cell_pressure)
{
	if (_obstacle > 0.1f)
		return _cell_pressure;//return cell preassure if there is an obstacle

	return _neighbour_pressure;
}


#pragma kernel Jacobi
[numthreads(8,8,1)]
void Jacobi (uint3 id : SV_DispatchThreadID)
{
	//get cell neighbours pressure
	float pressure_north = pressure[id.xy + float2(0, inverse_size.y)].x;
	float pressure_south = pressure[id.xy + float2(0, -inverse_size.y)].x;
	float pressure_east = pressure[id.xy + float2(inverse_size.x, 0)].x;
	float pressure_west = pressure[id.xy + float2(-inverse_size.x, 0)].x;

	//get cell neighbours obstacles
	float obstacles_north = obstacles[id.xy + float2(0, inverse_size.y)].x;
	float obstacles_south = obstacles[id.xy + float2(0, -inverse_size.y)].x;
	float obstacles_east = obstacles[id.xy + float2(inverse_size.x, 0)].x;
	float obstacles_west = obstacles[id.xy + float2(-inverse_size.x, 0)].x;
	
	float cell_pressure = pressure[id.xy];

	//factor obstacles into cell pressure
	pressure_north = DetermineCellPressure(obstacles_north, pressure_north, cell_pressure);
	pressure_south = DetermineCellPressure(obstacles_south, pressure_south, cell_pressure);
	pressure_east = DetermineCellPressure(obstacles_east, pressure_east, cell_pressure);
	pressure_west = DetermineCellPressure(obstacles_west, pressure_west, cell_pressure);

	//calculate jacobi
	float cell_divergence = divergence[id.xy];
	float jacobi = (pressure_west + pressure_east + pressure_south + pressure_north - cell_divergence) * 0.25f;//divide by four because there are four neighbours
	write_R[id.xy] = jacobi;
}
