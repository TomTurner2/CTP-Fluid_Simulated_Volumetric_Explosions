#include "FSVEUtility.cginc"


float dt;
float particle_drag;
float particle_radius;
float thermal_mass;
float burn_rate;
float burn_threshold;
float produced_heat;
float divergence_amount;
float4 size;

struct FuelParticle// CPU struct maps to this one
{
	float3 position;
	float3 velocity;
	float temperature;
	float mass;
};

RWStructuredBuffer<FuelParticle> particles;
StructuredBuffer<float3> velocity;
StructuredBuffer<float> temperature;

RWStructuredBuffer<float> divergence;
RWStructuredBuffer<float> temperature_write;


#pragma kernel ApplyParticlesVelocities
[numthreads(8,1,1)]
void ApplyParticlesVelocities (uint3 id : SV_DispatchThreadID)
{
	float3 velocity = particles[id.x].velocity;	
	particles[id.x].position += velocity * dt;// Move acording to velocity
}


bool CheckVelocityDifference(float _velocity, float _dt, float _velocity_diff)
{
	return abs(_velocity) < _dt * _velocity_diff;// Velocity change should not be larger than difference between fluid and particle velocity
}


bool CheckVelocityDifferences(float3 _final_velocity, float _dt, float3 _velocity_diff)
{
	return CheckVelocityDifference(_final_velocity.x, _dt, _velocity_diff.x) &&
			CheckVelocityDifference(_final_velocity.y, _dt, _velocity_diff.y) &&
			CheckVelocityDifference(_final_velocity.z, _dt, _velocity_diff.z);
}


#pragma kernel CalculateParticlesVelocity
[numthreads(8,1,1)]
void CalculateParticlesVelocity(uint3 id : SV_DispatchThreadID)
{
	float3 grid_pos =  particles[id.x].position.xyz * size.xyz;
	float3 fluid_velocity = SampleBilinear(velocity, grid_pos, size);

	if (particles[id.x].mass > 0.001f)
	{
		float3 velocity_diff = fluid_velocity - particles[id.x].velocity;
		float total_drag = particle_drag * particle_radius * particle_radius;// Drag according to particle size
		float3 final_velocity = dt * (1.0f / particles[id.x].mass) * total_drag * velocity_diff;// Final velocity according to mass and drag

		if (CheckVelocityDifferences(final_velocity, dt, velocity_diff))
		{
			particles[id.x].velocity += final_velocity;// Add on new velocity
		}
		else
		{
			particles[id.x].velocity = fluid_velocity;// Set new velocity, if larger than diff between fluid and prev velocity
		}
	}
	else
	{
		particles[id.x].velocity = fluid_velocity;// If no mass just go with the flow
	}

	particles[id.x].temperature += dt * (SampleBilinear(temperature, grid_pos, size) -
	particles[id.x].temperature) / thermal_mass;// Apply fluid temperature to particle according to thermal mass
}


#pragma kernel BurnParticle
[numthreads(8,1,1)]
void BurnParticle(uint3 id : SV_DispatchThreadID)
{
	if (particles[id.x].temperature < burn_threshold &&
	particles[id.x].mass > 0.001f)// Don't burn if not hot enough
		return;

	float3 grid_pos =  particles[id.x].position.xyz * size.xyz;// Particles position in volume
	int index = GetIndex(grid_pos, size);

	temperature_write[index] += dt * produced_heat * burn_rate;// Add temperature to fluid
	divergence[index] += dt * divergence_amount * burn_rate;// Add Divergence
	particles[id.x].mass -= dt * burn_rate;// Burn off mass from the particle
}
