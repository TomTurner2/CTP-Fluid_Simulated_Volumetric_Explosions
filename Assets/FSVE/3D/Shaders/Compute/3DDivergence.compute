#include "FSVEUtility.cginc"


RWStructuredBuffer<float> write_R;
StructuredBuffer<float3> velocity;
StructuredBuffer<float> obstacles;
float4 size;


float3 CheckSolidCells(float _obstacles, float3 _velocity)
{
	if (_obstacles >  0.1f)// If solid
		return float3(0, 0, 0);// Velocity is zero

	return _velocity;
}


#pragma kernel Divergence
[numthreads(8,8,8)]
void Divergence (uint3 id : SV_DispatchThreadID)
{
	int index = GetIndex(id, size); 

	// Get neighbour indexs
	int up_id =  GetIndex(int3(id.x, min(size.y - 1, id.y + 1), id.z), size);
	int down_id = GetIndex(int3(id.x, max(0, id.y-1), id.z), size);

	int left_id = GetIndex(int3(max(0, id.x-1), id.y, id.z), size);
	int right_id = GetIndex(int3(min(size.x-1, id.x+1), id.y, id.z), size);

	int front_id = GetIndex(int3(id.x, id.y, max(0, id.z-1)), size);
	int back_id = GetIndex(int3(id.x, id.y, min(size.z-1, id.z+1)), size);

	// Get neighbours velocity
	float3 velocity_up = velocity[up_id];
	float3 velocity_down = velocity[down_id];

	float3 velocity_left = velocity[left_id];
	float3 velocity_right = velocity[right_id];

	float3 velocity_front = velocity[front_id];
	float3 velocity_back = velocity[back_id];

	// Get neighbours obstacles
	float obstacles_up = obstacles[up_id];
	float obstacles_down = obstacles[down_id];

	float obstacles_right = obstacles[right_id];
	float obstacles_left = obstacles[left_id];

	float obstacles_forward = obstacles[front_id];
	float obstacles_back = obstacles[back_id];

	// Set any solid cells to zero velocity
	velocity_up = CheckSolidCells(obstacles_up, velocity_up);
	velocity_down = CheckSolidCells(obstacles_down, velocity_down);

	velocity_right= CheckSolidCells(obstacles_right, velocity_right);
	velocity_left = CheckSolidCells(obstacles_left, velocity_left);

	velocity_front = CheckSolidCells(obstacles_forward, velocity_front);
	velocity_back = CheckSolidCells(obstacles_back, velocity_back);

	float divergence = ((velocity_right.x - velocity_left.x) +
	(velocity_up.y - velocity_down.y) + (velocity_back.z - velocity_front.z)) * 0.5f;// Divergence vector calculus operation

	write_R[index] = divergence;
}
