float dt;
float dissipation;
float decay;
float forward;

Texture2D<float2> velocity;
Texture2D<float> obstacles;

RWTexture2D<float2> write_RG;// Render textures with RG channel to represent vector components
Texture2D<float2> read_RG;

RWTexture2D<float2> write_R;// Render textures with only R channel to store single values
Texture2D<float> read_R;


float2 GetAdvectedPosition(float2 _position)
{
	_position -= dt * forward * velocity[_position.xy];
	return _position;
}


#pragma kernel Advect
[numthreads(8, 8, 1)]
void Advect(uint3 id : SV_DispatchThreadID)// Single value advection
{
	if (obstacles[id.xy] > 0.1f)
	{
		write_R[id.xy] = float2(0, 0);
		return;
	}

	float2 advect_pos = GetAdvectedPosition(id);
	write_R[id.xy] = max(0, read_R[advect_pos]) * dissipation - decay;// TODO bilinear interp removed during tests, need to re-add.
}


#pragma kernel AdvectVelocity
[numthreads(8, 8, 1)]
void AdvectVelocity(uint3 id : SV_DispatchThreadID)// For vector advection
{
	if (obstacles[id.xy] > 0.1f)
	{
		write_RG[id.xy] = float2(0, 0);// If an obstacle is at this grid coord, set velocity to zero
		return;
	}

	float2 advect_pos = GetAdvectedPosition(id);
	write_RG[id.xy] = read_RG[advect_pos] * dissipation;
}