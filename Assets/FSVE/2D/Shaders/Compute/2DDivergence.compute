RWTexture2D<float2> write_RG;
Texture2D<float2> velocity;
Texture2D<float> obstacles;
float2 size;


float2 CheckSolidCells(float _obstacles, float2 _velocity)
{
	if (_obstacles >  0.1f)//if solid
		return float2(0,0);//velocity is zero

	return _velocity;
}


#pragma kernel Divergence
[numthreads(8,8,1)]
void Divergence (uint3 id : SV_DispatchThreadID)
{
	uint2 north_id =  uint2(id.x, clamp(id.y + 1, 0, size.y));
	uint2 south_id =  uint2(id.x, clamp(id.y - 1, 0, size.y));
	uint2 east_id =  uint2(clamp(id.x - 1, 0, size.x), id.y);
	uint2 west_id =  uint2(clamp(id.x + 1, 0, size.x), id.y);

	// Get cell neighbours velocity
	float2 velocity_north = velocity[north_id.xy].rg;
	float2 velocity_south = velocity[south_id.xy].rg;
	float2 velocity_east = velocity[east_id.xy].rg;
	float2 velocity_west = velocity[west_id.xy].rg;

	// Get cell neighbours obstacles
	float obstacles_north = obstacles[north_id.xy].r;
	float obstacles_south = obstacles[south_id.xy].r;
	float obstacles_east = obstacles[east_id.xy].r;
	float obstacles_west = obstacles[west_id.xy].r;

	// Set any solid cells to zero velocity
	velocity_north = CheckSolidCells(obstacles_north, velocity_north);
	velocity_south = CheckSolidCells(obstacles_south, velocity_south);
	velocity_east = CheckSolidCells(obstacles_east, velocity_east);
	velocity_west = CheckSolidCells(obstacles_west, velocity_west);

	float divergence = (velocity_east.x - velocity_west.x +
	velocity_north.y - velocity_south.y) * 0.5f;

	write_RG[id.xy] = float2(divergence, 0);
}
