// NOT NONE OF THESE SHADERS ARE OPTIMAL THEY ARE SIMPLE!!!
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSRandom
#include "Assets\Compute\NoiseInclude.compute"

int TexSize;
int RandOffset;
Texture2D<float4> Prev;
RWTexture2D<float4> Result;
//
[numthreads(8, 8, 1)] 
void CSRandom(uint3 id : SV_DispatchThreadID) {
  if (wang_hash(id.x + id.y * 1000 + RandOffset) & 1) {
    Result[id.xy] = float4(1, 1, 1, 1);
  }
  else {
    Result[id.xy] = float4(0,0,0,0);
  }
  
}

[numthreads(8, 8, 1)] 
void CSMain(uint3 id : SV_DispatchThreadID) {
  float4 a = Prev[id.xy];

  float4 b = Prev[id.xy + uint2(-1, -1)] + Prev[id.xy + uint2(-1, 0)] +
             Prev[id.xy - uint2(-1, 1)] + Prev[id.xy + uint2(0, -1)] +
             Prev[id.xy - uint2(0, 1)] + Prev[id.xy + uint2(1, -1)] +
             Prev[id.xy + uint2(1, 0)] + Prev[id.xy - uint2(1, 1)];

  int r = round(a.w);
  if (r > 0) {
    if ((b.w < 1.9) || (b.w > 3.1)) {
      r = 0;
    }
  } else {
    if ((b.w > 2.9) && (b.w < 3.1)) {
      r = 1;
    } else if (((id.x == 0) || (id.y == 0) || (id.x == TexSize) || (id.y == TexSize)) &&
      (wang_hash(id.x + id.y * 1000 + RandOffset) & 1)) {
      // Extra rule for noisy border
      r = 1;
    } 
  }

  Result[id.xy] = float4(r + (a.r * 0.4), a.g + (r * 0.4) - (1-r), r, r);
}
